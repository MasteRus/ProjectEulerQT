#include "stdafx.h"
#include "Additional/SomeMathFunc.h"
//#include "Additional/BigInt.h"
using namespace std;


/*
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
===================================================================================================
Answer: 233168  
*/
long long proj001(long long n)
{
	long long result=0;
	for (int i=0;i<n;i=i+3)
	{
		result+=i;
		//cout << "i=" << i <<endl;
	}
	for (int i=0;i<n;i=i+5)
	{
		if (i%3!=0) {result+=i;
		//cout << "i=" << i <<endl;
		}
	}
	return result;
}
/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
===================================================================================================
Answer: 4613732  
*/
long long proj002(long long n)
{
	long long a1=1, a2=1,a3=0; 
        long long result=0;
	while (a3<=n)
	{
		a3=a2+a1;
		a1=a2;
		a2=a3;
		if (a3%2==0) result+=a3;
	}
	return result;
}
/*
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
===================================================================================================
Answer: 6857  
*/

long long proj003(long long n)
{
	long long result=1;
	long long i=1;
	while (i<=n)
	{
		i++;
		if (n%i==0) { 
			if (i>result) result=i;
			n=n/i;
			i=1;
		}
	}
	return result;
}

/*
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91  99.

Find the largest palindrome made from the product of two 3-digit numbers.
===================================================================================================
Answer: 906609  
*/
long long proj004()
{
    string str10, revstr;
	long long i,j,num;
	long long result=0;
        int temp1=0;

	for (i=100;i<999;i++)
	{
		for (j=100;j<999;j++)
		{
			num=i*j;
                //@QTReb
                //itoa(num,str10,10);

		
                //temp1=_stricmp(str10, _strrev( _strdup( str10) ) );
		//cout << str10<< " " << _strrev( _strdup( str10) ) << endl;
                 string str10=NumberToString(num);


                 revstr=str10;

                //QString str10((int) (num));
                //QByteArray ba = str10.toAscii();
                //char *d = ba.data();
                std::reverse(revstr.begin(), revstr.end());
                //QString revstr(d);
                //temp1=
                if (str10==revstr) temp1=0; else temp1=1;
		if ((temp1==0)&&(num>result)) {result=num; cout << result <<endl;}
		}
	}
	return (result);
}

/*
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
===================================================================================================
Answer: 232792560  
*/
long long proj005(int n)
{
	long long temp=1;
	for (int i=1;i<=n;i++)
	{
		temp=nok(temp,i);
		
	}
	return temp;
}

/*
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)^2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
===================================================================================================
Answer: 25164150  
*/
long long proj006(long long n)
{
	long long result=0;
	int i=1;
	long long temp=0;
	while (i<=n)
	{
		result-=i*i;
		temp+=i;
		i++;
	}
	return (result+(long long)(pow((double(n)*(n+1)/2),2)));
}

/*
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
===================================================================================================
Answer: 104743  
*/
long long proj007(long long n)
{
	long long result=0;
	int j,i=1;
	int flag=1;
	long long counter=0;
	while (counter<n)
	{
		i++;
		flag=1;
		for (j=2;j<=(long long)(sqrt(double(i)));j++)
		{
			if (i%j==0) {flag=0; break;}
		}
		if (flag==1) {counter++; 
		}
	}
	result=i;
	return (result);
}

/*
Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
===================================================================================================
Answer: 40824  
*/
long long proj008()
{
	char str[2000];
	FILE *f;
    if ((f=fopen ("Resources/8.txt","r"))==NULL)
    {
        printf("File not found"); return (0);
    } else
    {
        fscanf(f,"%s", &str);
		fclose(f);

		long long result=0;
		int tmp,j,i=1;
		result=i;
		
		for (i=0;i<=995;i++)
		{
			tmp=1;
			
			for (j=i;j<i+5;j++)
			{
				//cout << str[j];
				
				tmp=tmp*chr(str[j]);

			}
			if (tmp>result) result=tmp;
		}
		return (result);
	}
	
}
/*
A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,

a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
===================================================================================================
Answer: 31875000  
*/

long long proj009()
{
	int i,j,k;
	long long result=0;
	
	for (i=200;i<333;i++)
	{
		for (j=i;j<=1000-i;j++)
		{
			k=1000-i-j;
			//cout << "(A2,B2,C2)=(" << i*i <<","<< j*j <<","<< k*k <<")=" << i*i+j*j<< endl;
			if ((i*i+j*j)==k*k)
			{
				cout << "(A2,B2,C2)=(" << i*i <<","<< j*j <<","<< k*k <<")=" << i*i+j*j<< endl;
				result=i*j*k;
			}
		}
	}
	
	/*
	int arr[1000];
	for (i=0;i<1000;i++)
	{
		arr[i]=i*i;
	}

	for (i=1;i<1000;i++)
	{
		for (j=i;j<=1000;j++)
		{
			//k=1000-i-j;
			
			for (k=0;k<1000;k++)
			if ((i*i+j*j)==arr[k])
			{
				if (i+j+k==1000) cout << "(A2,B2,C2)=(" << i <<","<< j <<","<< k <<")=" << i+j+k<< ", i*j*k=" << i*j*k <<endl;
				//cout << "(A2,B2,C2)=(" << i*i <<","<< j*j <<","<< arr[k] <<")=" << i+j+k<< endl;
				result=i*j*k;
			}

		}
	}
	*/
	return result;
}
